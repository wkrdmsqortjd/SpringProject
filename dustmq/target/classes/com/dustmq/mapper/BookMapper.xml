<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="com.dustmq.mapper.BookMapper">

	<!-- criteria(검색 조건) -->
	<sql id="criteria">

			<!-- authorId 앞에 AND를 없앨 수 있게 prefixOverrides 속성 사용 -->
			<trim prefix="(" suffix=") AND" prefixOverrides="AND">
				
				<!-- typeArr에 담긴 요소수 만큼 반복되어 작성 -->
				<foreach collection="typeArr" item="type">	<!-- collection : 전달받은 인자. 배열 형태만 가능 , item : 인자값의 alias 명 -->			
				
				<!-- 조건문끼리는 AND로 이어지게 추가 -->
				<trim prefix="AND">
					<choose>	
						
						<when test="type == 'A'.toString()">			<!-- 'A'는 작가 검색 -->
							<trim prefixOverrides="OR" prefix="(" suffix=")" >
								<foreach item="authorId" collection="authorArr">	<!-- authorId는 배열의 형태로 전달 받기 때문에 foreach 사용 -->
									<trim prefix="OR">
										authorId = #{authorId}
									</trim>
								</foreach>
							</trim>
						</when>						
						
						<when test="type == 'C'.toString()">			<!-- 'C'는 카테고리 검색 -->
							cateCode like '%' || #{cateCode} || '%'
						</when>
						
						<when test="type == 'T'.toString()">			<!-- 'T'는 책 제목 검색 -->
							bookName like '%' || #{keyword} || '%'
						</when>
					
					</choose>
				</trim>
				
				</foreach>
			
			</trim>
			
	</sql>
	
	<!-- 상품 검색 -->
	<select id="getGoodsList" resultType="com.dustmq.model.BookVO">
	
		<![CDATA[
			select * from(
				select /*+INDEX_DECS(bs_book SYS_C008313)*/ rownum as rn, bookId, bookName, ratingAvg, 
					(select authorName from bs_author where bs_book.authorId = bs_author.authorId) authorName, authorId,
		            (select cateName from bs_bcate where bs_book.cateCode = bs_bcate.cateCode) cateName,cateCode, publisher, publeYear, bookPrice, bookDiscount 
				from bs_book
				where
		]]>
		
		<include refid="criteria"></include>
		
		   <![CDATA[
	    		        
		        rownum <= #{pageNum} * #{amount} 
	        	)
	        where rn > (#{pageNum} -1) * #{amount}
		]]>	  		
	
	</select>
	
	<!-- 상품 총 개수 -->
	<select id="goodsGetTotal" resultType="int">

		select count(*) from bs_book
		where 
		<include refid="criteria"></include>
		bookId > 0
	
	</select>
	
	<!-- 작가 id 리스트 요청 -->
	<select id="getAuthorIdList" resultType="String">
	
		select authorid from bs_author where authorname like '%' || #{keyword} || '%'
	
	</select>
	
	<!-- 국내 카테고리 리스트 -->
	<select id="getCateCode1" resultType="com.dustmq.model.CateVO">
	
		<![CDATA[
				select * from bs_bcate where cateCode > 100000 and cateCode < 200000
		]]>

	</select>
	
	<!-- 국외 카테고리 리스트 -->
  	<select id="getCateCode2" resultType="com.dustmq.model.CateVO">
	
		<![CDATA[
				select * from bs_bcate where cateCode > 200000 and cateCode < 300000
		]]>
	
	</select>
  
  	<!-- 검색 대상 카테고리 리스트 - 코드번호 반환 -->
  	<select id="getCateList" resultType="String">
  	
  		<!-- DISTINCT는 select 조회시 중복 컬럼을 제거해주고, 중복되지 않은 컬럼만 출력 -->
  		select DISTINCT cateCode from bs_book
  		where
  		<foreach item="type" collection="typeArr">
				<choose>
					<when test="type == 'A'.toString()">	<!-- 작가 검색 -->
						<trim prefixOverrides="or">
							<foreach collection="authorArr" item="authorId">
								<trim prefix="or">
										authorId = #{authorId}
										<!-- select distinct cateCode from bs_book where authorId = #{authorId} OR orauthorId = #{authorId} ... -->
								</trim>
							</foreach>
						</trim>
					</when>
					<when test="type == 'T'.toString()">	<!-- 책 제목 검색 -->
							bookName like '%' || #{keyword} || '%'
						<!-- select distinct cateCode from bs_book where select distinct cateCode from bs_book where bookName like '%' || #{keyword} || '%' -->
					</when>
				</choose>
  		</foreach>  	
  	</select>
  	
  	<!-- 카테고리 정보(이름, 번호 + 검색 대상 수) -->
  	<select id="getCateInfo" resultType="com.dustmq.model.CateFilterVO">
	
		<!-- count(*) 뒤에 별칭을 적은 이유는 MyBatis의 자바 빈 규약에 따라 지정한 반환 타입에 데이터를 세팅하기 때문 -->
		select DISTINCT count(*) cateCount, a.cateCode, b.cateName
		from bs_book a left join bs_bcate b on a.cateCode = b.cateCode 
		where 

		<foreach item="type" collection="typeArr">		
  				<choose>
  					<when test="type == 'A'.toString()">	<!-- 작가 이름 검색 -->
  					
  						<trim prefix="(" suffix=")" prefixOverrides="or">
		  			
		  					<foreach collection="authorArr" item="authorId">
		  			
		  						<trim prefix="or">
		  			
		  							authorId = #{authorId}
		  							<!-- (authorId = #{authorId} or authorId = #{authorId}...) -->
		  						</trim>
		  			
		  					</foreach>
  					
  						</trim>
  					
  						and a.cateCode = #{cateCode}

  					</when>
  					
  					<when test="type == 'T'.toString()">	<!-- 책 제목 검색 -->
  					
  						bookName like '%' || #{keyword} || '%'
  						and a.cateCode = #{cateCode}
  					
  					</when>
  					  					
  				</choose>
  		</foreach>
  		
  		group by a.cateCode, b.cateName
	
	</select>
	
	<!-- 상품 정보 -->
	<select id="getGoodsInfo" resultType="com.dustmq.model.BookVO">
	
		<!-- cateName은 bs_author 와 bs_bcate에 있어 JOIN문 사용 -->
		select a.BOOKID, a.BOOKNAME, a.AUTHORID, b.AUTHORNAME, a.PUBLEYEAR, a.PUBLISHER, a.CATECODE, c.CATENAME, a.BOOKPRICE, a.BOOKSTOCK, a.BOOKDISCOUNT, a.BOOKINTRO, a.BOOKCONTENTS
		from bs_book a 
		left outer join bs_author b on a.authorId = b.authorId
		left outer join bs_bcate c on a.catecode = c.catecode
		where bookId = #{bookId}
	
	</select>
	
	<!-- 상품 id 이름 -->
	<select id="getBookIdName" resultType="com.dustmq.model.BookVO">
	
		select bookId, bookName from bs_book
		where bookId = #{bookId}
	
	</select>
	
	<!-- 평점 순 상품정보 -->
	<select id="likeSelect" resultType="com.dustmq.model.SelectVO">
  
		<!-- 1. 상품테이블에서, 2. 해당 컬럼의 데이터를 조회 3. 평점순으로 정리 4. 정렬한 데이터들을 rownum값으로 8번까지 5. 모든 데이터 조회 -->
		select * from	
		(select bookId, bookName, ratingAvg, (select cateName from bs_bcate where bs_book.cateCode = bs_bcate.cateCode) as cateName	<!-- 2. 서브쿼리 -->
		from bs_book	
		order by ratingAvg desc nulls last) 
		<![CDATA[									
		where rownum < 9	
		]]>	
	</select>
	
  </mapper>